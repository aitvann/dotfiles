#! /usr/bin/env bb
; vim: set ft=clojure:

(require
 '[clojure.string :as str]
 '[babashka.cli :as cli]
 '[babashka.process :refer [process sh]]
 '[babashka.fs :as fs])

(import [java.time LocalDateTime]
        [java.time.format DateTimeFormatter])

(defn run-rofi [list prompt]
  (let [{:keys [exit out]} (sh {:in (str/join "\n" list)}
                               "rofi"
                               "-dmenu"
                               "-i"
                               "-p" prompt)]
    (if (not= exit 0)
      (throw (Exception. "User have cancelled the selection"))
      (str/trim out))))

(def gpg-emails
  (->> (sh "gpg --list-keys")
       :out
       str/split-lines
       (map #(re-matches #".*<(.+)>.*" %))
       (filter (comp not nil?))
       (map second)))

(defn formatted-timestamp []
  (let [formatter (DateTimeFormatter/ofPattern "yyyy-MM-dd_HH-mm-ss")]
    (.format (LocalDateTime/now) formatter)))

(def filename (str "secrets-" (formatted-timestamp)))

(def scope (str (fs/create-temp-dir {:prefix (str "export-" filename)})))
(def secrets-scope (str scope "/secrets"))
(fs/create-dir secrets-scope)

(def opts (cli/parse-args *command-line-args*
                          {:exec-args {:output (str (System/getProperty "user.home") "/data/backups/secrets")}}))
(def res-dst (:output (:opts opts)))

(println "exporting gpg keys...")
(def selected-key
  (try (run-rofi gpg-emails "Select GPG key to export")
       (catch Exception e
         (println e)
         (System/exit 1))))
(def gpg-target (str secrets-scope "/gpg"))
(fs/create-dir gpg-target)
(sh {:out :write :out-file (str gpg-target "/public.pub.asc")} "gpg --export --armor" selected-key)
(sh {:out :write :out-file (str gpg-target "/public.priv.asc")} "gpg --export-secret-keys --armor" selected-key)
(sh {:out :write :out-file (str gpg-target "/public.spriv.asc")} "gpg --export-secret-subkeys --armor" selected-key)
(sh {:out :write :out-file (str gpg-target "/ownertrust.txt")} "gpg --export-ownertrust")

(println "exporting password store...")
(def pass-target (str secrets-scope "/pass"))
(fs/create-dir pass-target)
(def password-store-dir (System/getenv "PASSWORD_STORE_DIR"))
(fs/copy-tree password-store-dir pass-target)

(println "encrypting secrets...")
(def secrets-bond (str secrets-scope ".tar"))
(sh "tar -cf" secrets-bond "-C" secrets-scope ".")
(def secrets-res (str filename ".tar.gpg"))
(def maybe-pwd
  (if-let [password (:password (:opts opts))]
    (str (str " --passphrase " password))
    ""))
(sh (str "gpg --batch" maybe-pwd " --output") secrets-res "--symmetric" secrets-bond)

(println "moving to storage...")
(fs/move secrets-res res-dst)
(fs/delete-tree scope)

; debug
;
; (->
;  (process "echo" scope)
;  (process "wl-copy")
;  deref)
