#! /usr/bin/env bb
; vim: set ft=clojure:

(require
 '[clojure.string :as str]
 '[babashka.cli :as cli]
 '[babashka.process :refer [process sh]]
 '[babashka.fs :as fs])

(def opts (cli/parse-args *command-line-args*))
(def path (first (:args opts)))

(def filename (-> path (str/split #"/") last))
(def scope (str (fs/create-temp-dir {:prefix (str "import-" filename "-")})))

(println "decrypting batch...")
(def secrets-bond (str scope "/secrets.tar"))
(def maybe-pwd
  (if-let [password (:password (:opts opts))]
    (str (str " --passphrase " password))
    ""))
(sh (str "gpg --batch" maybe-pwd " --output") secrets-bond "--no-symkey-cache" "--decrypt" path)
(def secrets-scope (str scope "/secrets"))
(fs/create-dir secrets-scope)
(sh "tar -xf" secrets-bond "-C" secrets-scope)

(print "importing gpg keys...")
(def gpg-home (or (System/getenv "GNUPGHOME") (str (System/getProperty "user.home") "/.gnupg")))
(defn fix-gpg-permissions []
  (fs/walk-file-tree
   gpg-home
   {:visit-file
    (fn [path _attrs]
      (println (str "setting permission for file: " path))
      (try
        (fs/set-posix-file-permissions path "rw-------")
        (catch Exception _ (println "failed to set permission for" (str path))))
      :continue)
    :pre-visit-dir
    (fn [path _attrs]
      (println (str "setting permission for dir: " path))
      (fs/set-posix-file-permissions path "rwx------")
      :continue)}))
(fix-gpg-permissions)
(sh "gpg --import" (str secrets-scope "/gpg/public.pub.asc"))
(try
  (fs/create-dir (str gpg-home "/private-keys-v1.d"))
  (catch Exception _ nil))
(fix-gpg-permissions)
(sh "gpg --import" (str secrets-scope "/gpg/public.priv.asc"))
(fix-gpg-permissions)
(sh "gpg --import" (str secrets-scope "/gpg/public.spriv.asc"))
(fix-gpg-permissions)
(sh "gpg --import-ownertrust" (str secrets-scope "/gpg/ownertrust.txt"))
(fix-gpg-permissions)

(println "importing password store...")
(def password-store-dir (System/getenv "PASSWORD_STORE_DIR"))
(fs/create-dir password-store-dir)
(fs/copy-tree (str secrets-scope "/pass") password-store-dir)

(fs/delete-tree scope)

; debug
;
; (->
;  (process "echo" scope)
;  (process "wl-copy")
;  deref)
